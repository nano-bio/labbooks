# Generated by Django 3.0.8 on 2020-07-02 13:17

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('clustof', '0001_initial'), ('clustof', '0002_journalentry_written_notes'), ('clustof', '0003_auto_20150721_1013'), ('clustof', '0004_vacuumstatus'), ('clustof', '0005_vacuumstatus_temperature'), ('clustof', '0006_auto_20160718_0952'), ('clustof', '0007_auto_20160718_1101'), ('clustof', '0008_auto_20160913_0943'), ('clustof', '0009_auto_20170808_0942'), ('clustof', '0010_measurement_laser_timing'), ('clustof', '0011_auto_20180412_1320'), ('clustof', '0012_measurement_laser_power_file'), ('clustof', '0013_auto_20190109_1320'), ('clustof', '0014_measurement_cluster_size_distribution'), ('clustof', '0015_auto_20200520_0906'), ('clustof', '0016_auto_20200520_0910')]

    initial = True

    dependencies = [
        ('cheminventory', '0006_auto_20160322_1543'),
    ]

    operations = [
        migrations.CreateModel(
            name='CurrentSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tof_settings_file', models.CharField(max_length=1500, verbose_name=b'TOF Settings File')),
                ('tof_settings_file_time', models.DateTimeField()),
                ('data_filename', models.CharField(default=b'D:\\Data\\', max_length=1500, verbose_name=b'Filename')),
                ('data_filename_time', models.DateTimeField()),
                ('pressure_cs', models.FloatField(default=4e-05, verbose_name=b'Pressure CS')),
                ('pressure_cs_time', models.DateTimeField()),
                ('pressure_pu1', models.FloatField(default=3e-06, verbose_name=b'Pressure PU1')),
                ('pressure_pu1_time', models.DateTimeField()),
                ('pressure_pu2', models.FloatField(default=1e-06, verbose_name=b'Pressure PU2')),
                ('pressure_pu2_time', models.DateTimeField()),
                ('pressure_ion', models.FloatField(default=2e-08, verbose_name=b'Pressure ION')),
                ('pressure_ion_time', models.DateTimeField()),
                ('pressure_tof', models.FloatField(default=3e-07, verbose_name=b'Pressure TOF')),
                ('pressure_tof_time', models.DateTimeField()),
                ('temperature_he', models.FloatField(default=9.0, verbose_name=b'He Temperature')),
                ('temperature_he_time', models.DateTimeField()),
                ('electron_energy_set', models.FloatField(blank=True, null=True, verbose_name=b'Electron Energy (for MS)')),
                ('electron_energy_set_time', models.DateTimeField()),
                ('ion_block', models.FloatField()),
                ('ion_block_time', models.DateTimeField()),
                ('pusher', models.FloatField()),
                ('pusher_time', models.DateTimeField()),
                ('wehnelt', models.FloatField()),
                ('wehnelt_time', models.DateTimeField()),
                ('extraction_1', models.FloatField()),
                ('extraction_1_time', models.DateTimeField()),
                ('extraction_2', models.FloatField()),
                ('extraction_2_time', models.DateTimeField()),
                ('deflector_1', models.FloatField()),
                ('deflector_1_time', models.DateTimeField()),
                ('deflector_2', models.FloatField()),
                ('deflector_2_time', models.DateTimeField()),
                ('filament_current', models.FloatField()),
                ('filament_current_time', models.DateTimeField()),
                ('trap_current', models.FloatField()),
                ('trap_current_time', models.DateTimeField()),
                ('oven_1_temperature', models.FloatField(blank=True, null=True)),
                ('oven_1_temperature_time', models.DateTimeField()),
                ('oven_1_power', models.FloatField(blank=True, null=True)),
                ('oven_1_power_time', models.DateTimeField()),
                ('oven_2_temperature', models.FloatField(blank=True, null=True)),
                ('oven_2_temperature_time', models.DateTimeField()),
                ('oven_2_power', models.FloatField(blank=True, null=True)),
                ('oven_2_power_time', models.DateTimeField()),
                ('polarity', models.CharField(choices=[(b'NEG', b'Negative'), (b'POS', b'Positive'), (b'OLD', b'Unknown (Old File)')], default=b'NEG', max_length=3)),
                ('polarity_time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Turbopump',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(blank=True, max_length=100)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('service_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('tof_settings_file', models.CharField(max_length=1500, verbose_name=b'TOF Settings File')),
                ('data_filename', models.CharField(default=b'D:\\Data\\', max_length=1500, verbose_name=b'Filename')),
                ('rating', models.IntegerField(blank=True, default=3, null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('scantype', models.CharField(choices=[(b'ES', b'Energyscan'), (b'MS', b'Mass Spectrum'), (b'TS', b'Temperature-Scan'), (b'PS', b'Pressure-Scan'), (b'LS', b'Laser-Scan'), (b'OLD', b'Unknown (Old File)')], default=b'MS', max_length=20)),
                ('pressure_cs', models.FloatField(default=4e-05, verbose_name=b'Pressure CS')),
                ('pressure_pu1', models.FloatField(default=3e-06, verbose_name=b'Pressure PU1')),
                ('pressure_pu2', models.FloatField(default=1e-06, verbose_name=b'Pressure PU2')),
                ('pressure_ion', models.FloatField(default=2e-08, verbose_name=b'Pressure ION')),
                ('pressure_tof', models.FloatField(default=3e-07, verbose_name=b'Pressure TOF')),
                ('stag_pressure_he', models.FloatField(default=25, verbose_name=b'He Stagnation Pressure')),
                ('temperature_he', models.FloatField(default=9.0, verbose_name=b'He Temp')),
                ('nozzle_diameter', models.FloatField(default=5)),
                ('electron_energy_set', models.FloatField(blank=True, null=True, verbose_name=b'Electron Energy set on Power Supply (for MS)')),
                ('real_electron_energy', models.FloatField(blank=True, null=True, verbose_name=b'Real Electron Energy (for MS)')),
                ('ion_block', models.FloatField()),
                ('pusher', models.FloatField()),
                ('wehnelt', models.FloatField()),
                ('extraction_1', models.FloatField(blank=True, null=True)),
                ('extraction_2', models.FloatField()),
                ('deflector_1', models.FloatField(verbose_name=b'Deflector oben/unten')),
                ('deflector_2', models.FloatField(verbose_name=b'Deflector links/rechts')),
                ('filament_current', models.FloatField()),
                ('trap_current', models.FloatField()),
                ('housing_current', models.FloatField(blank=True, null=True)),
                ('oven_1_temperature', models.FloatField(blank=True, null=True)),
                ('oven_1_power', models.FloatField(blank=True, null=True)),
                ('oven_2_temperature', models.FloatField(blank=True, null=True)),
                ('oven_2_power', models.FloatField(blank=True, null=True)),
                ('faraday_cup', models.FloatField(blank=True, null=True)),
                ('flagged', models.BooleanField(default=False)),
                ('substance', models.TextField(max_length=1500, verbose_name=b'Comment')),
                ('polarity', models.CharField(choices=[(b'NEG', b'Negative'), (b'POS', b'Positive'), (b'OLD', b'Unknown (Old File)')], default=b'NEG', max_length=3)),
                ('evaluated_by', models.CharField(blank=True, max_length=20)),
                ('evaluation_file', models.FileField(blank=True, default=b'', upload_to=b'clustof/evaluations/')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='op1', to='clustof.Operator')),
                ('chem_pu1_gas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='chem_pu1_gas', to='cheminventory.Chemical', verbose_name=b'Chemical PU1 Gas')),
                ('chem_pu1_oven', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='chem_pu1_oven', to='cheminventory.Chemical', verbose_name=b'Chemical PU1 Oven')),
                ('chem_pu2_gas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='chem_pu2_gas', to='cheminventory.Chemical', verbose_name=b'Chemical PU2 Gas')),
                ('chem_pu2_oven', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='chem_pu2_oven', to='cheminventory.Chemical', verbose_name=b'Chemical PU2 Oven')),
                ('is_inlet_gas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='is_inlet_gas', to='cheminventory.Chemical', verbose_name=b'Ion Source Inlet Gas')),
                ('operator2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='op2', to='clustof.Operator')),
                ('operator3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='op3', to='clustof.Operator')),
                ('marked', models.BooleanField(default=False)),
                ('extraction_1_left', models.FloatField(blank=True, null=True)),
                ('extraction_1_right', models.FloatField(blank=True, null=True)),
                ('laser_timing', models.IntegerField(blank=True, null=True)),
                ('laser_power_file', models.FileField(blank=True, upload_to=b'clustof/powerfiles/', verbose_name=b'Laser Power Measurement File')),
                ('cluster_size_distribution', models.FileField(blank=True, null=True, upload_to=b'clustof/clusterSizeDistribution/')),
                ('lis_deflector_y', models.FloatField(blank=True, null=True, verbose_name=b'Deflector Y')),
                ('lis_deflector_z', models.FloatField(blank=True, null=True, verbose_name=b'Deflector Z')),
                ('lis_electron_energy', models.FloatField(blank=True, null=True, verbose_name=b'Electron energy')),
                ('lis_filament_current', models.FloatField(blank=True, null=True, verbose_name=b'Filament current')),
                ('lis_ion_block', models.FloatField(blank=True, null=True, verbose_name=b'Ion block')),
                ('lis_trap_current', models.FloatField(blank=True, null=True, verbose_name=b'Trap current')),
            ],
            options={
                'ordering': ['-time'],
                'get_latest_by': 'time',
            },
        ),
        migrations.CreateModel(
            name='VacuumStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField()),
                ('g1', models.FloatField(blank=True, null=True)),
                ('g2', models.FloatField(blank=True, null=True)),
                ('g3', models.FloatField(blank=True, null=True)),
                ('g4', models.FloatField(blank=True, null=True)),
                ('g5', models.FloatField(blank=True, null=True)),
                ('g6', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Vacuum Status',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('text', models.TextField(max_length=3000)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='clustof.Measurement')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='clustof.Operator')),
            ],
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField()),
                ('attachment', models.FileField(blank=True, default=b'', upload_to=b'clustof/techjournal/')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='clustof.Operator')),
                ('written_notes', models.ImageField(blank=True, upload_to=b'clustof/techjournal/notes/')),
            ],
            options={
                'ordering': ['-time'],
                'verbose_name_plural': 'Journal Entries',
            },
        ),
        migrations.CreateModel(
            name='TurbopumpStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current', models.FloatField()),
                ('date', models.DateField(auto_now_add=True)),
                ('pump', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='clustof.Turbopump')),
            ],
            options={
                'verbose_name_plural': 'Turbopump Status',
            },
        ),
    ]
