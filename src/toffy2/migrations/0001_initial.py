# Generated by Django 3.0.8 on 2020-09-11 12:56

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('email', models.EmailField(blank=True, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('integration_start', models.IntegerField(blank=True, null=True, verbose_name='Integration start [s]')),
                ('integration_stop', models.IntegerField(blank=True, null=True, verbose_name='Integration stop [s]')),
                ('data_file', models.FileField(blank=True, help_text='Export massspecs and upload plain text files only.', upload_to='toffy2/dataFiles/')),
                ('tof_settings_file', models.FileField(blank=True, upload_to='toffy2/settingsFiles/', verbose_name='TOF settings file')),
                ('comment', models.TextField(blank=True, max_length=5000)),
                ('evaluation_file', models.FileField(blank=True, upload_to='toffy2/evaluationFiles/')),
                ('pressure_cs', models.FloatField(verbose_name='Pressure CS [mbar]')),
                ('pressure_sector', models.FloatField(verbose_name='Pressure Sector [mbar]')),
                ('pressure_pu1', models.FloatField(blank=True, null=True, verbose_name='Pressure PU1 [mbar]')),
                ('pressure_pu2', models.FloatField(blank=True, null=True, verbose_name='Pressure PU2 [mbar]')),
                ('pressure_eva', models.FloatField(verbose_name='Pressure EVA [mbar]')),
                ('pressure_tof', models.FloatField(verbose_name='Pressure TOF [mbar]')),
                ('cluster_source_he_pressure', models.FloatField(verbose_name='He pressure [bar]')),
                ('cluster_source_nozzle_temperature', models.FloatField(verbose_name='Nozzle temperature [K]')),
                ('ion_source_ion_block_potential', models.FloatField(verbose_name='Ion block potential [V]')),
                ('ion_source_electron_energy', models.FloatField(verbose_name='Electron energy [eV]')),
                ('ion_source_electron_current', models.FloatField(verbose_name='Electron current [uA]')),
                ('ion_source_filament', models.FloatField(verbose_name='Filament [A]')),
                ('sector_voltage_inner', models.FloatField(verbose_name='Inner sector [V]')),
                ('sector_voltage_outer', models.FloatField(verbose_name='Outer sector [V]')),
                ('deflector_1y', models.FloatField(verbose_name='Defl 1Y [V]')),
                ('deflector_1x', models.FloatField(verbose_name='Defl 1X [V]')),
                ('deflector_2z', models.FloatField(verbose_name='Defl 2Z [V]')),
                ('deflector_2x', models.FloatField(verbose_name='Defl 2X [V]')),
                ('deflector_plate', models.FloatField(verbose_name='Plate [V]')),
                ('sample_gas_bronkhorst_setpoint', models.FloatField(verbose_name='Bronkhorst Setpoint [%]')),
                ('oven_1_voltage', models.FloatField(blank=True, null=True, verbose_name='Voltage [V]')),
                ('oven_1_current', models.FloatField(blank=True, null=True, verbose_name='Current [I]')),
                ('oven_1_power', models.FloatField(blank=True, null=True, verbose_name='Power [W]')),
                ('oven_1_temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature [C]')),
                ('oven_1_comment', models.TextField(blank=True, max_length=5000, verbose_name='Comment')),
                ('oven_2_voltage', models.FloatField(blank=True, null=True, verbose_name='Voltage [V]')),
                ('oven_2_current', models.FloatField(blank=True, null=True, verbose_name='Current [I]')),
                ('oven_2_power', models.FloatField(blank=True, null=True, verbose_name='Power [W]')),
                ('oven_2_temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature [C]')),
                ('oven_2_comment', models.TextField(blank=True, max_length=5000, verbose_name='Comment')),
                ('evaporation_gas', models.CharField(default='Helium', max_length=100, verbose_name='Gas')),
                ('evaporation_gas_bronkhorst_setpoint', models.FloatField(blank=True, null=True, verbose_name='Bronkhorst Setpoint [%]')),
                ('collision_gas', models.CharField(blank=True, max_length=100, null=True, verbose_name='Gas')),
                ('collision_pressure', models.FloatField(blank=True, null=True, verbose_name='Pressure [mbar]')),
                ('collision_energy', models.FloatField(blank=True, null=True, verbose_name='Energy [eV]')),
                ('evaluated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='evaluated_by', to='toffy2.Operator')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='operator', to='toffy2.Operator')),
            ],
            options={
                'ordering': ['-time'],
                'get_latest_by': 'time',
            },
        ),
    ]
