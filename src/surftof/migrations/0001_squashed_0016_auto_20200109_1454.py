# Generated by Django 3.0.8 on 2020-07-02 13:22

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('surftof', '0001_initial'), ('surftof', '0002_auto_20190607_1422'), ('surftof', '0003_remove_measurement_surface_material'), ('surftof', '0004_measurement_surface_material'), ('surftof', '0005_auto_20190607_1449'), ('surftof', '0006_auto_20190607_1454'), ('surftof', '0007_potentialsettings_estimated_impact_energy'), ('surftof', '0008_auto_20190701_1824'), ('surftof', '0009_auto_20190709_1143'), ('surftof', '0010_auto_20190731_1308'), ('surftof', '0011_isegassignments'), ('surftof', '0012_auto_20190905_1144'), ('surftof', '0013_masscalibration'), ('surftof', '0014_auto_20191031_0820'), ('surftof', '0015_countspermass'), ('surftof', '0016_auto_20200109_1454')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Gas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('chemical_formula', models.CharField(max_length=100)),
                ('comment', models.TextField(blank=True, help_text=b'Add infos like gas bottle number, purity, reseller, ...', null=True)),
                ('purity', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'gases',
            },
        ),
        migrations.CreateModel(
            name='Surface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('chemical_formula', models.CharField(blank=True, max_length=100)),
                ('comment', models.TextField(blank=True, help_text=b'Additional information like purity, charge, serial number,...', max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='PotentialSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('spark_plug', models.FloatField(blank=True, null=True)),
                ('nozzle', models.FloatField(blank=True, null=True)),
                ('skimmer', models.FloatField(blank=True, null=True)),
                ('wien_in', models.FloatField(blank=True, null=True)),
                ('wien_out', models.FloatField(blank=True, null=True)),
                ('wien_e_top', models.FloatField(blank=True, null=True)),
                ('wien_e_bottom', models.FloatField(blank=True, null=True)),
                ('wien_magnet', models.FloatField(blank=True, null=True)),
                ('focus_1', models.FloatField(blank=True, null=True)),
                ('quad_ref', models.FloatField(blank=True, null=True)),
                ('quad_field_axis', models.FloatField(blank=True, null=True)),
                ('focus_2_inner', models.FloatField(blank=True, null=True)),
                ('focus_2_outer', models.FloatField(blank=True, null=True)),
                ('surface', models.FloatField(blank=True, null=True)),
                ('focus_3_outer', models.FloatField(blank=True, null=True)),
                ('focus_3_inner', models.FloatField(blank=True, null=True)),
                ('ion_spacer', models.FloatField(blank=True, null=True)),
                ('extraction', models.FloatField(blank=True, null=True)),
                ('focus_4', models.FloatField(blank=True, null=True)),
                ('slit_disc', models.FloatField(blank=True, null=True)),
                ('tof_is_ref', models.FloatField(blank=True, null=True)),
                ('pusher', models.FloatField(blank=True, null=True)),
                ('tof_zero_level', models.FloatField(blank=True, null=True)),
                ('tof_drift_l1', models.FloatField(blank=True, null=True, verbose_name=b'TOF Drift and L1')),
                ('tof_l2', models.FloatField(blank=True, null=True, verbose_name=b'TOF L2')),
                ('tof_ll', models.FloatField(blank=True, null=True, verbose_name=b'TOF LL')),
                ('mcp', models.FloatField(blank=True, null=True, verbose_name=b'MCP')),
                ('comment', models.TextField(blank=True, max_length=5000)),
                ('slit_disc_angle', models.FloatField(blank=True, null=True, verbose_name=b'Slit disc angle in degrees')),
                ('surface_angle', models.FloatField(blank=True, null=True, verbose_name=b'Surface angle in degrees')),
                ('estimated_impact_energy', models.FloatField(blank=True, null=True)),
                ('stepper_slit_disc_current_max', models.IntegerField(blank=True, null=True)),
                ('stepper_slit_disc_current_standby', models.IntegerField(blank=True, null=True)),
                ('stepper_surface_current_max', models.IntegerField(blank=True, null=True)),
                ('stepper_surface_current_standby', models.IntegerField(blank=True, null=True)),
                ('filament_source_current', models.FloatField(blank=True, null=True)),
                ('filament_source_voltage', models.FloatField(blank=True, null=True)),
                ('filament_tof_bottom_current', models.FloatField(blank=True, help_text=b'The current is produced by the filament top', null=True)),
                ('filament_tof_bottom_potential', models.FloatField(blank=True, null=True)),
                ('filament_tof_current', models.FloatField(blank=True, null=True)),
                ('filament_tof_voltage', models.FloatField(blank=True, null=True)),
                ('focus_1a', models.FloatField(blank=True, null=True)),
                ('focus_1b', models.FloatField(blank=True, null=True)),
                ('source_cage', models.FloatField(blank=True, null=True)),
                ('source_ion_spacer', models.FloatField(blank=True, null=True)),
                ('source_pusher', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'potential settings',
            },
        ),
        migrations.CreateModel(
            name='MeasurementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('comment', models.TextField(blank=True, max_length=5000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IsegAssignments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('m1_ch00', models.CharField(blank=True, help_text=b'Use the exact names like in the potential settings', max_length=100)),
                ('m1_ch01', models.CharField(blank=True, max_length=100)),
                ('m1_ch02', models.CharField(blank=True, max_length=100)),
                ('m1_ch03', models.CharField(blank=True, max_length=100)),
                ('m1_ch04', models.CharField(blank=True, max_length=100)),
                ('m1_ch05', models.CharField(blank=True, max_length=100)),
                ('m1_ch06', models.CharField(blank=True, max_length=100)),
                ('m1_ch07', models.CharField(blank=True, max_length=100)),
                ('m2_ch00', models.CharField(blank=True, max_length=100)),
                ('m2_ch01', models.CharField(blank=True, max_length=100)),
                ('m2_ch02', models.CharField(blank=True, max_length=100)),
                ('m2_ch03', models.CharField(blank=True, max_length=100)),
                ('m2_ch04', models.CharField(blank=True, max_length=100)),
                ('m2_ch05', models.CharField(blank=True, max_length=100)),
                ('m2_ch06', models.CharField(blank=True, max_length=100)),
                ('m2_ch07', models.CharField(blank=True, max_length=100)),
                ('m2_ch08', models.CharField(blank=True, max_length=100)),
                ('m2_ch09', models.CharField(blank=True, max_length=100)),
                ('m2_ch10', models.CharField(blank=True, max_length=100)),
                ('m2_ch11', models.CharField(blank=True, max_length=100)),
                ('m3_ch00', models.CharField(blank=True, max_length=100)),
                ('m3_ch01', models.CharField(blank=True, max_length=100)),
                ('m3_ch02', models.CharField(blank=True, max_length=100)),
                ('m3_ch03', models.CharField(blank=True, max_length=100)),
                ('m3_ch04', models.CharField(blank=True, max_length=100)),
                ('m3_ch05', models.CharField(blank=True, max_length=100)),
                ('m3_ch06', models.CharField(blank=True, max_length=100)),
                ('m3_ch07', models.CharField(blank=True, max_length=100)),
                ('m3_ch08', models.CharField(blank=True, max_length=100)),
                ('m3_ch09', models.CharField(blank=True, max_length=100)),
                ('m3_ch10', models.CharField(blank=True, max_length=100)),
                ('m3_ch11', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name_plural': 'ISEG assignments',
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('surface_temperature', models.FloatField(blank=True, null=True)),
                ('tof_ions', models.CharField(choices=[(b'NEG', b'Negative'), (b'POS', b'Positive')], default=b'POS', max_length=3)),
                ('impact_energy_surface', models.FloatField(blank=True, null=True)),
                ('quadrupole_mass', models.FloatField(blank=True, null=True)),
                ('quadrupole_resolution', models.FloatField(blank=True, null=True)),
                ('pressure_ion_source_chamber', models.FloatField(blank=True, null=True)),
                ('pressure_surface_chamber', models.FloatField(blank=True, null=True)),
                ('pressure_tof_chamber', models.FloatField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, max_length=5000)),
                ('gas_is', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gas_is', to='surftof.Gas')),
                ('gas_surf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='gas_surf', to='surftof.Gas')),
                ('potential_settings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='surftof.PotentialSettings')),
                ('projectile', models.CharField(blank=True, max_length=50, null=True)),
                ('surface_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='surftof.Surface')),
                ('measurement_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='surftof.MeasurementType')),
                ('rating', models.IntegerField(choices=[(5, b'5 - Science'), (4, b'4 - Interesting'), (3, b'3 - Normal'), (2, b'2 - Not interesting'), (1, b'1 - Trash')], default=3)),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('electron_impact_energy_source', models.FloatField(blank=True, null=True)),
                ('electron_impact_energy_tof', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-time'],
                'get_latest_by': 'time',
            },
        ),
        migrations.CreateModel(
            name='CountsPerMass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_edit', models.DateTimeField(auto_now=True)),
                ('mass', models.FloatField(help_text=b'Use only the integer masses here, except "half masses" (28.5m/z)')),
                ('counts', models.FloatField(verbose_name=b'Normalized Counts')),
                ('counts_err', models.FloatField()),
                ('surface_impact_energy', models.FloatField(blank=True, null=True)),
                ('surface_temperature', models.FloatField(blank=True, null=True)),
                ('surface_current', models.FloatField(blank=True, null=True)),
                ('pressure_is', models.FloatField(blank=True, null=True)),
                ('pressure_surf', models.FloatField(blank=True, null=True)),
                ('pressure_tof', models.FloatField(blank=True, null=True)),
                ('molecule', models.CharField(blank=True, help_text=b'E.g. Be2D3. Only use this field, if you are sure, that the counts are not a combination of different molecules!', max_length=100, verbose_name=b'Molecular formula')),
                ('comment', models.TextField(blank=True, max_length=500)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surftof.Measurement')),
            ],
        ),
    ]
