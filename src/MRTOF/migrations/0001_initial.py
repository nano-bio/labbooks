# Generated by Django 3.2.17 on 2023-05-09 09:21

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('short_description', models.CharField(blank=True, max_length=500)),
                ('integration_start', models.IntegerField(blank=True, null=True, verbose_name='Integration start [s]')),
                ('integration_stop', models.IntegerField(blank=True, null=True, verbose_name='Integration stop [s]')),
                ('data_file', models.FileField(blank=True, help_text='Export massspecs and upload plain text files only.', upload_to='toffy/dataFiles/')),
                ('tof_settings_file', models.FileField(blank=True, upload_to='toffy/settingsFiles/', verbose_name='TOF settings file')),
                ('iseg_settings_file', models.FileField(blank=True, upload_to='toffy/isegFiles/')),
                ('comment', models.TextField(blank=True, max_length=5000)),
                ('he_pressure', models.FloatField(blank=True, default=20, null=True, verbose_name='He pressure [bar]')),
                ('nozzle_temperature', models.FloatField(blank=True, null=True, verbose_name='Nozzle temperature [K]')),
                ('quad_pressure', models.FloatField(blank=True, default=1e-06, null=True, verbose_name='Quad pressure [mbar]')),
                ('ion_block_potential', models.FloatField(blank=True, null=True, verbose_name='Ion block potential [V]')),
                ('ion_source_deflector_vertical', models.FloatField(blank=True, null=True, verbose_name='Deflector vertical [V]')),
                ('ion_source_deflector_horizontal', models.FloatField(blank=True, null=True, verbose_name='Deflector horizontal [V]')),
                ('electron_energy', models.FloatField(blank=True, null=True, verbose_name='Electron energy [eV]')),
                ('electron_current', models.FloatField(blank=True, null=True, verbose_name='Electron current [uA]')),
                ('bender_float_voltage', models.FloatField(blank=True, null=True, verbose_name='Float voltage [V]')),
                ('bender_deflect_voltage', models.FloatField(blank=True, null=True, verbose_name='Deflect voltage [V]')),
                ('deflector_float_z', models.FloatField(blank=True, null=True, verbose_name='Float Z [V]')),
                ('deflector_u_z', models.FloatField(blank=True, null=True, verbose_name='U Z [V]')),
                ('deflector_float_y', models.FloatField(blank=True, null=True, verbose_name='Float Y [V]')),
                ('deflector_u_y', models.FloatField(blank=True, null=True, verbose_name='U Y [V]')),
                ('deflector_front_aperture', models.FloatField(blank=True, null=True, verbose_name='Front aperture [V]')),
                ('oven_type', models.CharField(blank=True, choices=[('organic', 'Organic'), ('metal', 'Metal'), ('external', 'External'), ('description', 'See description')], max_length=20, null=True, verbose_name='Oven type')),
                ('oven_voltage', models.FloatField(blank=True, null=True, verbose_name='Voltage [V]')),
                ('oven_current', models.FloatField(blank=True, null=True, verbose_name='Current [I]')),
                ('oven_power', models.FloatField(blank=True, null=True, verbose_name='Power [W]')),
                ('oven_temperature', models.FloatField(blank=True, null=True, verbose_name='Temperature [C]')),
                ('pickup_pressure', models.FloatField(blank=True, default=1e-05, null=True, verbose_name='Pickup pressure [mbar]')),
                ('pickup_bronk', models.FloatField(blank=True, default=99, null=True, verbose_name='Pickup bronki [a.U.]')),
                ('evaporation_gas', models.CharField(blank=True, default='Helium', max_length=100, verbose_name='Gas')),
                ('evaporation_pressure', models.FloatField(blank=True, default=0.0001, null=True, verbose_name='Pressure [mbar]')),
                ('evap_bronk', models.FloatField(blank=True, default=99, null=True, verbose_name='Evap bronki [a.U.]')),
                ('collision_gas', models.CharField(blank=True, default='Argon', max_length=100, verbose_name='Gas')),
                ('collision_pressure', models.FloatField(blank=True, default=1e-05, null=True, verbose_name='Pressure [mbar]')),
                ('collision_energy', models.FloatField(blank=True, null=True, verbose_name='Energy [eV]')),
                ('coll_bronk', models.FloatField(blank=True, default=99, null=True, verbose_name='Coll bronki [a.U.]')),
                ('operator', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='MRTOF.operator')),
            ],
            options={
                'ordering': ['-time'],
                'get_latest_by': 'time',
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(max_length=500)),
                ('image1', models.ImageField(blank=True, null=True, upload_to='journal/journalImage/')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='journal/journalImage/')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='journal/journalImage/')),
                ('image4', models.ImageField(blank=True, null=True, upload_to='journal/journalImage/')),
                ('image5', models.ImageField(blank=True, null=True, upload_to='journal/journalImage/')),
                ('file', models.FileField(blank=True, null=True, upload_to='journal/journalFiles/', verbose_name='File which can be downloaded')),
                ('comment', ckeditor.fields.RichTextField(blank=True)),
                ('measurement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='MRTOF.measurement')),
                ('operator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='MRTOF.operator')),
            ],
            options={
                'ordering': ('-id',),
                'abstract': False,
            },
        ),
    ]
